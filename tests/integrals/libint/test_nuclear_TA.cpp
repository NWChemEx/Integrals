#include "../../test_common_TA.hpp"
#include "integrals/integrals.hpp"

using matrix_t = TA::detail::matrix_il<double>;

static matrix_t corr{
  {
    -61.5805952694322,
    -7.410821856331163,
    -0.0144738837457361,
    0.0000000000000000,
    0.0000000000000000,
    -1.231685572142488,
    -1.231685572142488,
  },
  {
    -7.410821856331163,
    -10.00907114207003,
    -0.1768908347336431,
    0.0000000000000000,
    0.0000000000000000,
    -2.977226853578134,
    -2.977226853578134,
  },
  {
    -0.01447388374573611,
    -0.1768908347336431,
    -9.944043341698766,
    0.0000000000000000,
    0.0000000000000000,
    -1.471793338712961,
    -1.471793338712961,
  },
  {
    0.0000000000000000,
    0.0000000000000000,
    0.0000000000000000,
    -9.875875995090944,
    0.0000000000000000,
    0.0000000000000000,
    0.0000000000000000,
  },
  {
    0.0000000000000000,
    0.0000000000000000,
    0.0000000000000000,
    0.0000000000000000,
    -9.987549935088563,
    -1.822236913476131,
    1.822236913476131,
  },
  {
    -1.231685572142488,
    -2.977226853578134,
    -1.471793338712961,
    0.0000000000000000,
    -1.822236913476131,
    -5.300203252295022,
    -1.067171080472437,
  },
  {
    -1.231685572142488,
    -2.977226853578134,
    -1.471793338712961,
    0.0000000000000000,
    1.82223691347613,
    -1.067171080472437,
    -5.30020325229502,
  },
};

TEST_CASE("Nuclear") {
    using integral_type = integrals::pt::nuclear<double>;
    using size_vector   = integrals::type::size_vector;

    sde::ModuleManager mm;
    integrals::load_modules(mm);
    auto [molecule, bs] = make_molecule();
    mm.at("Nuclear").change_input("Tile size", size_vector{6, 1});
    auto [V] = mm.at("Nuclear").run_as<integral_type>(molecule, bs, bs);
    TensorType corr_V(V.world(), V.trange(), corr);
    REQUIRE(libchemist::ta_helpers::allclose(V, corr_V));
}
