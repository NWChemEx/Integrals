#include "test_common_TA.hpp"
#include <integrals/integralsmm.hpp>
#include <property_types/ao_integrals/nuclear.hpp>

static BlockTensor corr{
  {{
     0,
     0,
   },
   {
     -61.5805952694322016, -7.4108218563311627, -0.0144738837457361,
     0.0000000000000000,   0.0000000000000000,  -1.2316855721424882,
     -1.2316855721424882,  -7.4108218563311627, -10.0090711420700309,
     -0.1768908347336432,  0.0000000000000000,  0.0000000000000000,
     -2.9772268535781348,  -2.9772268535781343, -0.0144738837457361,
     -0.1768908347336432,  -9.9440433416987624, 0.0000000000000000,
     0.0000000000000000,   -1.4717933387129607, -1.4717933387129607,
     0.0000000000000000,   0.0000000000000000,  0.0000000000000000,
     -9.8758759950909436,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,   0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,   0.0000000000000000,  -9.9875499350885555,
     -1.8222369134761305,  1.8222369134761305,  -1.2316855721424882,
     -2.9772268535781339,  -1.4717933387129609, 0.0000000000000000,
     -1.8222369134761305,  -5.3002032522950211, -1.0671710804724368,
     -1.2316855721424882,  -2.9772268535781343, -1.4717933387129609,
     0.0000000000000000,   1.8222369134761305,  -1.0671710804724368,
     -5.3002032522950193,
   }}};

TEST_CASE("Nuclear") {
    using integral_type = property_types::NuclearIntegral<double>;

    sde::ModuleManager mm;
    integrals::load_modules(mm);
    auto [molecule, bs] = make_molecule();
    auto [V] = mm.at("Nuclear").run_as<integral_type>(bs, bs, molecule, std::size_t{0});

    compare_integrals(V, corr);
}
