#include "test_common_TA.hpp"
#include <integrals/integralsmm.hpp>
#include <property_types/ao_integrals/kinetic.hpp>

static BlockTensor corr{
  {{
     0,
     0,
   },
   {
     29.0031999455395848, -0.1680109393164922, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  -0.0084163851854474,
     -0.0084163851854474, -0.1680109393164923, 0.8081279549303477,
     -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0705173385189988,  0.0705173385189988,  0.0000000000000000,
     -0.0000000000000000, 2.5287311981947651,  0.0000000000000000,
     0.0000000000000000,  0.1149203802569082,  0.1149203802569082,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     2.5287311981947642,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  2.5287311981947651,
     0.1470905524127557,  -0.1470905524127557, -0.0084163851854474,
     0.0705173385189988,  0.1149203802569082,  0.0000000000000000,
     0.1470905524127557,  0.7600318835666090,  -0.0039797367270372,
     -0.0084163851854474, 0.0705173385189988,  0.1149203802569082,
     0.0000000000000000,  -0.1470905524127557, -0.0039797367270372,
     0.7600318835666090,
   }}};

TEST_CASE("Kinetic") {
    using integral_type = property_types::KineticIntegral<double>;

    sde::ModuleManager mm;
    integrals::load_modules(mm);
    auto [molecule, bs] = make_molecule();
    auto [T] = mm.at("Kinetic").run_as<integral_type>(bs, bs, std::size_t{0});

    compare_integrals(T, corr);
}
