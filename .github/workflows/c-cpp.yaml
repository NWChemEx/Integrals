name: C_C++_CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1
      with: 
         python-version: '3.x'
    - name: get-gcc
      run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install gcc-8 g++-8 
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 95 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
            gcc  --version
            g++  --version
            gcov --version
    - name: get-gcovr
      run:  pip install gcovr
    - name: get-cmake
      run: |
            wget https://github.com/Kitware/CMake/releases/download/v3.16.3/cmake-3.16.3-Linux-x86_64.sh
            yes | /bin/sh cmake-3.16.3-Linux-x86_64.sh
    - name: get-libgmp-dev
      run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            #sudo apt-cache search gmp
            sudo apt-get install libgmp-dev
    - name: get-blas-lapack
      run:  sudo apt-get install libopenblas-base libopenblas-dev libgslcblas0 libgsl-dev liblapacke liblapacke-dev
    - name: get-boost
      run:  sudo apt-get install libboost-dev libboost-all-dev
    - name: get-eigen3
      run:  sudo apt-get install libeigen3-dev
    - name: get-openmpi
      run: |
            #sudo apt-get install openmpi-bin libopenmpi-dev
            sudo apt-get install mpich2
            mpicc   -show
            mpifort -show
            mpicxx  -show
            mpiexec --version
    - name: build-libint
      env:
            CPP_GITHUB_TOKEN: ${{ secrets.CPP_GITHUB_TOKEN }}
      run: |
            export INSTALL_PATH=`pwd`/install
            # check code out
            git clone https://github.com/evaleev/libint
            # make code and tarball
            cd libint
            ./autogen.sh
            mkdir build
            cd build
            ../configure
            make export # Needed to generate code and CMake stuff.
            # compile the code and install
            cd ../..
            tar -xf libint/build/libint-*.tgz
            cd libint-*
            ../cmake-3.16.3-Linux-x86_64/bin/cmake -H. -Bbuild -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH} -DCPP_GITHUB_TOKEN=$CPP_GITHUB_TOKEN
            cd build
            make
            make install
    - name: build-tiledarray
      run: |
            export INSTALL_PATH=`pwd`/install
            export CXX=`which g++`
            export CC=`which gcc`
            # check code out
            git clone https://github.com/evaleev/tiledarray
            cd tiledarray
            ../cmake-3.16.3-Linux-x86_64/bin/cmake -H. -Bbuild -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_C_COMPILER=${CC}
            cd build
            make
            make install
    - name: cmake
      env:
            CPP_GITHUB_TOKEN: ${{ secrets.CPP_GITHUB_TOKEN }}
      run: |
            export INSTALL_PATH=`pwd`/install
            cmake-3.16.3-Linux-x86_64/bin/cmake -H. -Bbuild -DCMAKE_PREFIX_PATH=${INSTALL_PATH} -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=TRUE -DCATCH_ENABLE_COVERAGE=ON -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage" -DCMAKE_EXE_LINKER_FLAGS="-fprofile-arcs" -DCPP_GITHUB_TOKEN=$CPP_GITHUB_TOKEN
    - name: ctest
      run: |
            #cmake-3.16.3-Linux-x86_64/bin/ctest --build-and-test build build --build-nocmake --build-generator "Unix Makefiles" --test-command make test
            cd build
            make
            make test
    - name: gcovr
      run: |
            cd ..
            gcovr --root Integrals --filter Integrals --exclude Integrals/tests --xml Integrals/coverage.xml
            ls -al Integrals
    - uses: codecov/codecov-action@v1
      with:
         token: ${{ secrets.CODECOV_TOKEN }}
         file: ./coverage.xml
